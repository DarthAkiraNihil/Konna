import org.jreleaser.model.Active

plugins {
    id 'java'

    id 'distribution'

    id 'jacoco'
    id 'maven-publish'

    id 'org.jreleaser' version '1.19.0'
    id 'checkstyle'

}

group = 'io.github.darthakiranihil.konna'
version = '0.1.0'

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'org.jreleaser'
    apply plugin: 'checkstyle'

    archivesBaseName = "Konna.${it.name}"
    checkstyle {
        toolVersion = "11.0.0"
    }
}

jacoco {
    toolVersion = "0.8.13"
    reportsDirectory = layout.buildDirectory.dir('reports/jacoco/')
}

checkstyle {
    toolVersion = "11.0.0"
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    implementation(project(":core"))
}

distributions {
    main {
        contents {
            from subprojects.collect { it.tasks.withType(Jar) }
        }
    }
}

def exportedProjects = [
    ":",
    ":core",
]

tasks.withType(Javadoc).configureEach {
    options {
        addStringOption('Xdoclint:none', '-quiet')
    }
    options.author = true
    options.tags = [ "apiNote:a:API Note:", "implSpec:a:Implementation Requirements:", "implNote:a:Implementation Note:" ]
}

tasks.register('allJavadoc', Javadoc) {
    source exportedProjects.collect { project(it).sourceSets.main.allJava }
    classpath = files(exportedProjects.collect { project(it).sourceSets.main.compileClasspath })
    destinationDir = layout.buildDirectory.dir("/docs/javadoc-all").get().asFile
}

tasks.register('jacocoRootReport', JacocoReport) {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(subprojects.test)

    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)

    reports {
        html.required = true
        xml.required = true
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoRootReport
}

jreleaser {
    gitRootSearch = true
    release {
        github {
            skipRelease = true
            skipTag = true
            sign = true
            branch = "master"
            branchPush = "master"
            overwrite = true
        }
    }
    signing {
        active = Active.ALWAYS
        armored = true
        verify = true
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required =  false
        csv.required = false
        html.required = true
        html.destination file("${layout.buildDirectory}/jacocoHtml")
    }
//    sourceSets
    sourceDirectories.from = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    // jacocoReportPath = "${layout.buildDirectory}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}
